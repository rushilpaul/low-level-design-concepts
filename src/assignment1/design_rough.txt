Custom Conditional Expression evaluator / DSL design - LLD question

LexicalParser
	returns List of tokens List<String>

Operator
	.and
	.or

UserMap
IntegerAttribute
StringAttribute
BooleanAttribute

Operand
Operator
LogicalOperator
	EqualsOperator
	GreaterOperator
	LessOperator

ConditionalOperator
	AndOperator
	OrOperator

ArithmeticOperator
------------------------------------------------------------------------------------

expr: (a == b or c == d) and (a != b)
expr: (a EqualsOperator b or c EqualsOperator d) and (a NotEqualsOperator b)

Evaluator evaluator = new Evaluator(tokens, userAttributes);

EqualOperator

Syntactic validation to be done by SyntaxValidator
Semantic validation to be done by Parser

(a != b) and c == true
a==between(x,a,b)

age >= 25 AND (...)

boolean allowed = Evaluator.evaluate();

interface Token {
    String getValue();
}

class Operand : Token {
    String operand;
}

abstract class Operator<T> {
    List<Operand> operands;
    T evaluate();
}

abstract class LogicalOperator extends Operator {
}

class EqualsOperator : LogicalOperator {    // ==
}

class NotEqualsOperator : LogicalOperator {    // !=
}

class LessThanEqualsOperator : LogicalOperator {    // <=
    boolean evaluate(List<Operand> operands) {
        // only 2 operands possible
        // check for equality
    }
}
